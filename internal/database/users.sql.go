// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, username, email, created_at, updated_at, api_key)
VALUES (
    $1,
    $2,
    $3,
    NOW(),
    NOW(),
    encode(digest(random()::text, 'sha256'), 'hex')
)
RETURNING id, username, email, created_at, updated_at, api_key
`

type CreateUserParams struct {
	ID       uuid.UUID
	Username string
	Email    string
}

// This query creates a new user in the database.
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKey,
	)
	return i, err
}

const getUserByAPIKey = `-- name: GetUserByAPIKey :one
SELECT id, username, email, created_at, updated_at, api_key FROM users 
WHERE api_key = $1
`

// This query retrieves a user by their ID.
func (q *Queries) GetUserByAPIKey(ctx context.Context, apiKey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByAPIKey, apiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKey,
	)
	return i, err
}
