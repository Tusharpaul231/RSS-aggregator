// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/google/uuid"

	"database/sql"
	"fmt"
	"log"
	_ "github.com/lib/pq"
)


var DB *sql.DB

// InitDB initializes the database connection using the provided connection string.
func InitDB(connStr string) {
	var err error
	DB, err = sql.Open("postgres", connStr)
	if err != nil {
		log.Fatalf("Failed to connect to the database: %v", err)
	}

	// Check if the connection is established
	err = DB.Ping()
	if err != nil {
		log.Fatalf("Failed to ping the database: %v", err)
	}

	fmt.Println("Database connection established successfully")
}

// CloseDB closes the database connection.
func CloseDB() {
	if DB != nil {
		err := DB.Close()
		if err != nil {
			log.Printf("Error closing the database connection: %v", err)
		} else {
			fmt.Println("Database connection closed successfully")
		}
	} else {
		fmt.Println("No database connection to close")
	}
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, username, email, created_at, updated_at)
VALUES ($1, $2, $3, NOW(), NOW())
RETURNING id, username, email, created_at, updated_at
`

type CreateUserParams struct {
	ID       uuid.UUID
	Username string
	Email    string
	created_at sql.NullTime
	updated_at sql.NullTime
}

// This query creates a new user in the database.
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
